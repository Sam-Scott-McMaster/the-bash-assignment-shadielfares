#!/bin/bash
#This program should accept 2 arguments, and rank them according to the year and gender given.
#Shadi El-Fares, 400525799
#Oct. 7th.24

#Defining functions up here before main function logic
help(){
	echo -e "Title: BN \nVersion: 0.0.1 \n \nBrief Overview: This app takes in put year and letter (representing sex of baby name). \n \nUsage: To use correctly please enter the info like the following: \n\n./bn year f|F|m|M|b|B \n\nf|F - returns any year of a child within for female names.\n\nb|B - returns any year of a child within for boy names.\n\nyear - will index based on the file corresponding to that year." >&1
}

rank(){
	#List the contents of us_baby_names directory
	#Basically ls us_baby_names 	
	
	#Setup boolean to check if I found the file or not
	found_file=false
	for file in $(ls us_baby_names)
	do
		# Extract the filename from the full path, to remove the us_baby_names/ part
		filename=$(basename "$file")

		if [[ $filename =~ yob${1}\.txt ]]
		then
			#File located at this point
			found_file=true
			
			#Initalize reused variables
			total_male_names=$(grep -P ".,M,." "us_baby_names/$file")
			total_female_names=$(grep -P ".,F,." "us_baby_names/$file")
			total_male_names_Num=$(echo "$total_male_names" | wc -l)
			total_female_names_Num=$(echo "$total_female_names" | wc -l)
			
			#Game loop
			while true
			do
				#Read for names first
				read -r names
				for name in $names
				do
					
					#Check if input is just a name {with respect to the avaliable data}
					if [[ ! $name =~ ^[a-zA-Z]{2,15}$ ]]
					then
						echo "Badly formatted name: $name" >&2
						exit 3;
					fi
				
					# Search within male or female names based on the initial gender
					if [[ $2 =~ ^[mM]$ ]]
					then
						rank=$(echo "$total_male_names" | grep -i -n "^$name," | cut -d: -f1)
						if [ -n "$rank" ]
						then
							echo "$1: $name ranked $rank out of $total_male_names_Num male names."
						else
							echo "$1: $name not found among male names."
						fi
					elif [[ $2 =~ ^[fF]$ ]]
					then
						rank=$(echo "$total_female_names" | grep -i -n "^$name," | cut -d: -f1)
						if [ -n "$rank" ]
						then
							echo "$1: $name ranked $rank out of $total_female_names_Num female names."
						else
							echo "$1: $name not found among female names."
						fi
					elif [[ $2 =~ ^[bB]$ ]]
					then
						rank_male=$(echo "$total_male_names" | grep -i -n "^$name," | cut -d: -f1)
						rank_female=$(echo "$total_female_names" | grep -i -n "^$name," | cut -d: -f1)

						if [ -n "$rank_male" ]
						then
							echo "$1: $name ranked $rank_male out of $total_male_names_Num male names."
						else
							echo "$1: $name not found among male names."
						fi
						if [ -n "$rank_female" ]
						then
							echo "$1: $name ranked $rank_female out of $total_female_names_Num female names."
						else
							echo "$1: $name not found among female names."
						fi
					fi
				done
			done
		fi
	done
	# Check if the second argument is 'f' or 'F'
	if ! $found_file
	then	
		echo "No data for $1" >&2
		exit 4
	fi
}

main(){
	if [[ $1 == "--help" ]];
	then
		#Calling help function
		help
	elif [[ $# != 2 ]];
	then
		echo "bn <year> <assigned gender f|F|m|M|b|B>" >&2
		exit 1;
	
	#If there is NOT 4 consequtive numbers OR there is NOT a single entry in the set
	elif [[ $1 =~ ^[0-9]{4}$ ]] && [[ ! $2 =~ ^[fFmMbB]$ ]];
	then
		echo "Badly formatted assigned gender: $2" >&2
		echo "bn <year> <assigned gender f|F|m|M|b|B>" >&2
		exit 2;
	else
		#Call rank function
		rank "$@"
	fi
}
main "$@"
